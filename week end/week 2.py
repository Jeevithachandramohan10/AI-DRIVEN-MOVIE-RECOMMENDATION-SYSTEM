# -*- coding: utf-8 -*-
"""JeeviWeek4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a34V9c5qZbQKIDX5asxedpD_bFC6sEf2
"""

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
print(df.isnull().sum())

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
df_cleaned = df.dropna() # Removes rows with missing values
print(df_cleaned)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
df["Age"].fillna(df["Age"].mean(), inplace=True)
# The columns 'Marks' and 'Attendance' are not in the original DataFrame.
# If you want to add them and fill NaN values, first create the columns:
df['Marks'] = pd.Series([None, None, None]) #  Creating 'Marks' column with NaN values
df['Attendance'] = pd.Series([None, None, None]) # Creating 'Attendance' column with NaN values
df["Marks"].fillna(df["Marks"].median(), inplace=True) # Now you can fill NaN
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True) # Now you can fill NaN

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
# Add the 'Passed' column, initializing it with None or any suitable default value
df['Passed'] = pd.Series([None, None, None])
# Now you can fill NaN values in the 'Passed' column
# Check if the mode is not empty before accessing the first element
if df["Passed"].mode().empty:
    # Handle the case where mode is empty, e.g., fill with a default value
    df["Passed"].fillna(False, inplace=True)  # Filling with False as an example
else:
    df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
df.ffill(inplace=True) # Forward fill
df.bfill(inplace=True) # Backward fill

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
df.drop_duplicates(inplace=True)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
# Add the 'Passed' column, initializing it with None or any suitable default value
df['Passed'] = pd.Series([None, None, None])
# Now you can fill NaN values in the 'Passed' column
# Check if the mode is not empty before accessing the first element
if df["Passed"].mode().empty:
    # Handle the case where mode is empty, e.g., fill with a default value
    df["Passed"].fillna(False, inplace=True)  # Filling with False as an example
else:
    df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
# Add the 'Passed' column, initializing it with None or any suitable default value
df['Passed'] = pd.Series([None, None, None])
# Now you can fill NaN values in the 'Passed' column
# Check if the mode is not empty before accessing the first element
if df["Passed"].mode().empty:
    # Handle the case where mode is empty, e.g., fill with a default value
    df["Passed"].fillna(False, inplace=True)  # Filling with False as an example
else:
    df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
# Add the 'Passed' column before applying get_dummies
df['Passed'] = pd.Series([None, None, None])
df_encoded = pd.get_dummies(df, columns=["Passed"], drop_first=True)
print(df_encoded)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
# Add the 'Passed' column, initializing it with None or any suitable default value
df['Passed'] = pd.Series([None, None, None])
# Now you can apply fit_transform on the 'Passed' column
df["Passed"] = encoder.fit_transform(df["Passed"])
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
def performance_category(marks):
if marks >= 85:
return "High"
elif marks >= 70:
return "Medium"
else:
return "Low"
df["Performance"] = df["Marks"].apply(performance_category)
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
def performance_category(marks):
    # The following lines need to be indented to be part of the function
    if marks >= 85:
        return "High"
    elif marks >= 70:
        return "Medium"
    else:
        return "Low"
# Assuming 'Marks' column exists in df (otherwise, create it)
df['Marks'] = [75, 80, 90]  # Example data for 'Marks'
df["Performance"] = df["Marks"].apply(performance_category)
print(df)

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]}
df = pd.DataFrame(data)
print(df)
df["Age_Group"] = pd.cut(df["Age"], bins=[18, 21, 24],
labels=["Young", "Adult"])
print(df)
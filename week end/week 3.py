# -*- coding: utf-8 -*-
"""JeeviWeek5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kyHn1HxoDV-ROH6SLReXJjdCGKqz8JAL
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y, label="Sine Wave")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.title("Simple Line Plot")
plt.legend()
plt.show()

categories = ['A', 'B', 'C', 'D']
values = [10, 25, 15, 30]

plt.figure(figsize=(6, 4))
plt.bar(categories, values, color='purple')
plt.xlabel("Categories")
plt.ylabel("Values")
plt.title("Bar Chart Example")
plt.show()

data = np.random.randn(1000)

plt.figure(figsize=(7, 5))
plt.hist(data, bins=30, color='green', edgecolor='black', alpha=0.7)
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.title("Histogram Example")
plt.show()

import seaborn as sns
import pandas as pd

# Creating sample data
data = np.random.randn(1000)
df = pd.DataFrame(data, columns=['Values'])

# Plot
sns.histplot(df['Values'], bins=30, kde=True, color='blue')
plt.title("Histogram with KDE")
plt.show()

tips = sns.load_dataset('tips')

plt.figure(figsize=(6, 4))
sns.boxplot(x=tips['total_bill'])
plt.title("Box Plot of Total Bill")
plt.show()

sns.pairplot(tips, hue='sex')
plt.show()

# Convert categorical columns to numerical representations before calculating correlation.
tips_encoded = pd.get_dummies(tips, columns=['sex', 'smoker', 'day', 'time'], drop_first=True)

# Calculate the correlation matrix using the encoded DataFrame.
corr_matrix = tips_encoded.corr()

plt.figure(figsize=(7, 5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

import plotly.express as px

df = pd.DataFrame({
    "x": np.linspace(0, 10, 100),
    "y": np.sin(np.linspace(0, 10, 100))
})

fig = px.line(df, x='x', y='y', title="Interactive Sine Wave")
fig.show()

fig = px.scatter(tips, x='total_bill', y='tip', color='sex', size='size', title="Total Bill vs Tip")
fig.show()

# Convert categorical columns to numerical representations before calculating correlation.
tips_encoded = pd.get_dummies(tips, columns=['sex', 'smoker', 'day', 'time'], drop_first=True)

# Calculate the correlation matrix using the encoded DataFrame.
corr_matrix = tips_encoded.corr()

plt.figure(figsize=(7, 5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()